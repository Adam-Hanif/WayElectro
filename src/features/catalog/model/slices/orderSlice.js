import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Thunk –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ Telegram
export const sendOrderToTelegram = createAsyncThunk(
  "order/sendOrderToTelegram",
  async (orderData, { rejectWithValue }) => {
    try {
      const telegramToken = "7678830937:AAHSkUEUdLJft_4307jbf5jufpWsTwRbP5M";
      const chatId = "903502069"; // –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ @userinfobot –≤ Telegram

      const message = `
        üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*
        üë§ *–ò–º—è:* ${orderData.customer.name}
        üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${orderData.customer.phone}
        üè† *–ê–¥—Ä–µ—Å:* ${orderData.customer.address}
        üõí *–¢–æ–≤–∞—Ä—ã:*
        ${orderData.products
          .map(
            (item) =>
              `- ${item.name} ${item.text} ${item.text} ${item.count}—à—Ç. ${item.price}‚ÇΩ`
          )
          .join("\n")}
        üí∞ *–ò—Ç–æ–≥–æ:* ${orderData.totalPrice} ‚ÇΩ
      `;

      const response = await axios.post(
        `https://api.telegram.org/bot${telegramToken}/sendMessage`,
        {
          chat_id: chatId,
          text: message,
          parse_mode: "Markdown", // –ß—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–æ—Å—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        }
      );

      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

const orderSlice = createSlice({
  name: "order",
  initialState: {
    loading: false,
    error: null,
    success: false,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(sendOrderToTelegram.pending, (state) => {
        state.loading = true;
        state.error = null;
        state.success = false;
      })
      .addCase(sendOrderToTelegram.fulfilled, (state) => {
        state.loading = false;
        state.success = true;
      })
      .addCase(sendOrderToTelegram.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞";
      });
  },
});

export default orderSlice.reducer;
